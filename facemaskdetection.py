# -*- coding: utf-8 -*-
"""FaceMaskDetection.ipynb

Automatically generated by Colaboratory.



!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle

!kaggle datasets download -d omkargurav/face-mask-dataset

import zipfile
zip_ref = zipfile.ZipFile('/content/face-mask-dataset.zip','r')
zip_ref.extractall()
zip_ref.close()

#importing dependencies
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Flatten,MaxPooling2D,Conv2D,BatchNormalization,Dropout
import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

#yo listdir le diyeko particular folder ma sabai file lai list garxa.yeha with_mask flder ko file lai list garekoxa
with_mask_file = os.listdir('/content/data/with_mask')
print(with_mask_file[0:5])
print(with_mask_file[-5:])

without_mask_file = os.listdir('/content/data/without_mask')

print(f"Number of with mask file are {len(with_mask_file)}")
print(f"Number of without mask file are {len(without_mask_file)}")

"""**Creating Labels for With mask and Without Mask**

Let's Say 

with mask ----> 1,

without mask --->0
"""

with_mask_labels = [1]*3725
without_mask_labels = [0]*3828

print(with_mask_labels[0:5])
print(without_mask_labels[0:5])

labels= with_mask_labels+without_mask_labels
print(len(labels))
print(labels[0:5])
print(labels[-5:])

"""**Mask lako nalako image lai display garera hereko to know about sabai image eautai sizeko xaki nai vanera**"""

img = mpimg.imread('/content/data/with_mask/with_mask_2087.jpg')
imgplot = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/data/without_mask/without_mask_2925.jpg')
imgplot = plt.imshow(img)
plt.show()

"""**Aba image ko preprocessing garxam**

1.Resize image garna paro

2.image lai numpy array ma convert garne
"""

with_mask_path = '/content/data/with_mask/'

data=[]
for img_file in with_mask_file:
  image = Image.open(with_mask_path+img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)
with_mask_path = '/content/data/without_mask/'

for img_file in without_mask_file:
  image = Image.open(with_mask_path+img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

print(len(data))

print(data[0])

type(data[0])

data[0].shape

# image lai numpy array ma convert gare paxi hami le aba tesko label lai pani numpy array ma convert garnu parxa
X = np.array(data)
Y = np.array(labels)

X.shape

Y.shape

print(Y)

"""**Train Test Split garne**"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#scaling garna parxa 0-1 ko bich ma lerauna
X_train_scaled = X_train/255
X_test_scaled = X_test/255

print(X_train[0])

X_test_scaled[0]

"""**Building the CNN model**"""

num_class = 2

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(128,128,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,kernel_size=(3,3),activation='relu',input_shape=(128,128,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(128,kernel_size=(3,3),activation='relu',input_shape=(128,128,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(64,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(num_class,activation='relu'))

model.summary()

#Compile the neural network
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

#neural network lai training garne
history = model.fit(X_train_scaled,Y_train,validation_split=0.1,epochs=5)

"""**Model lai ecvaluation  garne**"""

loss,accuracy = model.evaluate(X_test_scaled,Y_test)
print("Test Accuracy: ",accuracy)

h = history
plt.plot(h.history['loss'],label='train_loss')
plt.plot(h.history['val_loss'],label='val_loss')
plt.legend()
plt.show()

h = history
plt.plot(h.history['accuracy'],label='train_accuracy')
plt.plot(h.history['val_accuracy'],label='val_accuracy')
plt.legend()
plt.show()

"""**Predictive System**"""

input_image_path = input("Enter path of image")

input_image =cv2.imread(input_image_path)
input_image_resize = cv2.resize(input_image,(128,128))
cv2_imshow(input_image_resize)
input_image_scaled = input_image_resize/255

input_image_reshape = np.reshape(input_image_scaled,[1,128,128,3])
input_prediction = model(input_image_reshape)
print(input_prediction)
input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 1:
  print('The person in the image is wearing a mask')
else:
  print('The person in the image is not wearing a mask')

